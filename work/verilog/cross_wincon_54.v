/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module cross_wincon_54 (
    input clk,
    input rst,
    input [24:0] grid,
    output reg [1:0] winner
  );
  
  
  
  reg [24:0] M_row_d, M_row_q = 1'h0;
  reg [24:0] M_col_d, M_col_q = 1'h0;
  reg [1:0] M_one_d, M_one_q = 1'h0;
  reg [1:0] M_zero_d, M_zero_q = 1'h0;
  
  always @* begin
    M_col_d = M_col_q;
    M_one_d = M_one_q;
    M_zero_d = M_zero_q;
    M_row_d = M_row_q;
    
    winner = 1'h0;
    M_row_d[0+0+4-:5] = grid[0+4-:5];
    M_row_d[5+0+4-:5] = grid[5+4-:5];
    M_row_d[10+0+4-:5] = grid[10+4-:5];
    M_row_d[15+0+4-:5] = grid[15+4-:5];
    M_row_d[20+0+4-:5] = grid[20+4-:5];
    M_col_d[0+0+4-:5] = {grid[4+0-:1], grid[9+0-:1], grid[14+0-:1], grid[19+0-:1], grid[24+0-:1]};
    M_col_d[5+0+4-:5] = {grid[3+0-:1], grid[8+0-:1], grid[13+0-:1], grid[18+0-:1], grid[23+0-:1]};
    M_col_d[10+0+4-:5] = {grid[2+0-:1], grid[7+0-:1], grid[12+0-:1], grid[17+0-:1], grid[22+0-:1]};
    M_col_d[15+0+4-:5] = {grid[1+0-:1], grid[6+0-:1], grid[11+0-:1], grid[16+0-:1], grid[21+0-:1]};
    M_col_d[20+0+4-:5] = {grid[0+0-:1], grid[5+0-:1], grid[10+0-:1], grid[15+0-:1], grid[20+0-:1]};
    M_one_d[0+0-:1] = (M_row_q[0+4-:5] == 5'h1f | M_row_q[5+4-:5] == 5'h1f | M_row_q[10+4-:5] == 5'h1f | M_row_q[15+4-:5] == 5'h1f | M_row_q[20+4-:5] == 5'h1f);
    M_one_d[1+0-:1] = (M_col_q[0+4-:5] == 5'h1f | M_col_q[5+4-:5] == 5'h1f | M_col_q[10+4-:5] == 5'h1f | M_col_q[15+4-:5] == 5'h1f | M_col_q[20+4-:5] == 5'h1f);
    M_zero_d[0+0-:1] = (M_row_q[0+4-:5] == 5'h00 | M_row_q[5+4-:5] == 5'h00 | M_row_q[10+4-:5] == 5'h00 | M_row_q[15+4-:5] == 5'h00 | M_row_q[20+4-:5] == 5'h00);
    M_zero_d[1+0-:1] = (M_col_q[0+4-:5] == 5'h00 | M_col_q[5+4-:5] == 5'h00 | M_col_q[10+4-:5] == 5'h00 | M_col_q[15+4-:5] == 5'h00 | M_col_q[20+4-:5] == 5'h00);
    winner[1+0-:1] = (M_one_q[0+0-:1] & M_one_q[1+0-:1]);
    winner[0+0-:1] = (M_zero_q[0+0-:1] & M_zero_q[1+0-:1]);
  end
  
  always @(posedge clk) begin
    M_row_q <= M_row_d;
    M_col_q <= M_col_d;
    M_one_q <= M_one_d;
    M_zero_q <= M_zero_d;
  end
  
endmodule
