/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_52 (
    input clk,
    input rst,
    input [5:0] alufn,
    input [15:0] aa,
    input [15:0] bb,
    output reg [15:0] out,
    output reg v,
    output reg n,
    output reg z
  );
  
  
  
  reg [511:0] M_reg_d, M_reg_q = 1'h0;
  
  always @* begin
    M_reg_d = M_reg_q;
    
    v = 1'h0;
    n = 1'h0;
    z = 1'h0;
    M_reg_d[16+15-:16] = aa;
    M_reg_d[32+15-:16] = bb;
    M_reg_d[496+15-:16] = 1'h1;
    
    case (alufn)
      6'h35: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] < M_reg_q[32+15-:16];
      end
      6'h33: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] == M_reg_q[32+15-:16];
      end
      6'h37: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] < M_reg_q[32+15-:16] | M_reg_q[16+15-:16] == M_reg_q[32+15-:16];
      end
      6'h00: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] + M_reg_q[32+15-:16];
      end
      6'h01: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] - M_reg_q[32+15-:16];
      end
      6'h20: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] << M_reg_q[32+15-:16];
      end
      6'h21: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] >> M_reg_q[32+15-:16];
      end
      6'h23: begin
        M_reg_d[48+15-:16] = $signed(M_reg_q[16+15-:16]) >>> M_reg_q[32+15-:16];
      end
      6'h18: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] & M_reg_q[32+15-:16];
      end
      6'h1e: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] | M_reg_q[32+15-:16];
      end
      6'h16: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16] ^ M_reg_q[32+15-:16];
      end
      6'h1a: begin
        M_reg_d[48+15-:16] = M_reg_q[16+15-:16];
      end
    endcase
    v = M_reg_q[160+15-:16];
    n = M_reg_q[176+15-:16];
    z = M_reg_q[192+15-:16];
    out = M_reg_q[48+15-:16];
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_q <= 1'h0;
    end else begin
      M_reg_q <= M_reg_d;
    end
  end
  
endmodule
