/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input btn0,
    input btn1,
    input btn2,
    input btn3,
    input btn4,
    input btn5,
    input btn6,
    input btn7,
    input btn8,
    input btn9,
    input btn10,
    input btn11,
    input btn12,
    input btn13,
    input btn14,
    input btn15,
    input btn16,
    input btn17,
    input btn18,
    input btn19,
    input btn20,
    input btn21,
    input btn22,
    input btn23,
    input btn24,
    output reg row0,
    output reg row1,
    output reg row2,
    output reg row3,
    output reg row4,
    output reg redPlayer,
    output reg greenPlayer
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_c0_out;
  reg [1-1:0] M_c0_in;
  button_conditioner_2 c0 (
    .clk(clk),
    .in(M_c0_in),
    .out(M_c0_out)
  );
  wire [1-1:0] M_e0_out;
  reg [1-1:0] M_e0_in;
  edge_detector_3 e0 (
    .clk(clk),
    .in(M_e0_in),
    .out(M_e0_out)
  );
  wire [1-1:0] M_c1_out;
  reg [1-1:0] M_c1_in;
  button_conditioner_2 c1 (
    .clk(clk),
    .in(M_c1_in),
    .out(M_c1_out)
  );
  wire [1-1:0] M_e1_out;
  reg [1-1:0] M_e1_in;
  edge_detector_3 e1 (
    .clk(clk),
    .in(M_e1_in),
    .out(M_e1_out)
  );
  wire [1-1:0] M_c2_out;
  reg [1-1:0] M_c2_in;
  button_conditioner_2 c2 (
    .clk(clk),
    .in(M_c2_in),
    .out(M_c2_out)
  );
  wire [1-1:0] M_e2_out;
  reg [1-1:0] M_e2_in;
  edge_detector_3 e2 (
    .clk(clk),
    .in(M_e2_in),
    .out(M_e2_out)
  );
  wire [1-1:0] M_c3_out;
  reg [1-1:0] M_c3_in;
  button_conditioner_2 c3 (
    .clk(clk),
    .in(M_c3_in),
    .out(M_c3_out)
  );
  wire [1-1:0] M_e3_out;
  reg [1-1:0] M_e3_in;
  edge_detector_3 e3 (
    .clk(clk),
    .in(M_e3_in),
    .out(M_e3_out)
  );
  wire [1-1:0] M_c4_out;
  reg [1-1:0] M_c4_in;
  button_conditioner_2 c4 (
    .clk(clk),
    .in(M_c4_in),
    .out(M_c4_out)
  );
  wire [1-1:0] M_e4_out;
  reg [1-1:0] M_e4_in;
  edge_detector_3 e4 (
    .clk(clk),
    .in(M_e4_in),
    .out(M_e4_out)
  );
  wire [1-1:0] M_c5_out;
  reg [1-1:0] M_c5_in;
  button_conditioner_2 c5 (
    .clk(clk),
    .in(M_c5_in),
    .out(M_c5_out)
  );
  wire [1-1:0] M_e5_out;
  reg [1-1:0] M_e5_in;
  edge_detector_3 e5 (
    .clk(clk),
    .in(M_e5_in),
    .out(M_e5_out)
  );
  wire [1-1:0] M_c6_out;
  reg [1-1:0] M_c6_in;
  button_conditioner_2 c6 (
    .clk(clk),
    .in(M_c6_in),
    .out(M_c6_out)
  );
  wire [1-1:0] M_e6_out;
  reg [1-1:0] M_e6_in;
  edge_detector_3 e6 (
    .clk(clk),
    .in(M_e6_in),
    .out(M_e6_out)
  );
  wire [1-1:0] M_c7_out;
  reg [1-1:0] M_c7_in;
  button_conditioner_2 c7 (
    .clk(clk),
    .in(M_c7_in),
    .out(M_c7_out)
  );
  wire [1-1:0] M_e7_out;
  reg [1-1:0] M_e7_in;
  edge_detector_3 e7 (
    .clk(clk),
    .in(M_e7_in),
    .out(M_e7_out)
  );
  wire [1-1:0] M_c8_out;
  reg [1-1:0] M_c8_in;
  button_conditioner_2 c8 (
    .clk(clk),
    .in(M_c8_in),
    .out(M_c8_out)
  );
  wire [1-1:0] M_e8_out;
  reg [1-1:0] M_e8_in;
  edge_detector_3 e8 (
    .clk(clk),
    .in(M_e8_in),
    .out(M_e8_out)
  );
  wire [1-1:0] M_c9_out;
  reg [1-1:0] M_c9_in;
  button_conditioner_2 c9 (
    .clk(clk),
    .in(M_c9_in),
    .out(M_c9_out)
  );
  wire [1-1:0] M_e9_out;
  reg [1-1:0] M_e9_in;
  edge_detector_3 e9 (
    .clk(clk),
    .in(M_e9_in),
    .out(M_e9_out)
  );
  wire [1-1:0] M_c10_out;
  reg [1-1:0] M_c10_in;
  button_conditioner_2 c10 (
    .clk(clk),
    .in(M_c10_in),
    .out(M_c10_out)
  );
  wire [1-1:0] M_e10_out;
  reg [1-1:0] M_e10_in;
  edge_detector_3 e10 (
    .clk(clk),
    .in(M_e10_in),
    .out(M_e10_out)
  );
  wire [1-1:0] M_c11_out;
  reg [1-1:0] M_c11_in;
  button_conditioner_2 c11 (
    .clk(clk),
    .in(M_c11_in),
    .out(M_c11_out)
  );
  wire [1-1:0] M_e11_out;
  reg [1-1:0] M_e11_in;
  edge_detector_3 e11 (
    .clk(clk),
    .in(M_e11_in),
    .out(M_e11_out)
  );
  wire [1-1:0] M_c12_out;
  reg [1-1:0] M_c12_in;
  button_conditioner_2 c12 (
    .clk(clk),
    .in(M_c12_in),
    .out(M_c12_out)
  );
  wire [1-1:0] M_e12_out;
  reg [1-1:0] M_e12_in;
  edge_detector_3 e12 (
    .clk(clk),
    .in(M_e12_in),
    .out(M_e12_out)
  );
  wire [1-1:0] M_c13_out;
  reg [1-1:0] M_c13_in;
  button_conditioner_2 c13 (
    .clk(clk),
    .in(M_c13_in),
    .out(M_c13_out)
  );
  wire [1-1:0] M_e13_out;
  reg [1-1:0] M_e13_in;
  edge_detector_3 e13 (
    .clk(clk),
    .in(M_e13_in),
    .out(M_e13_out)
  );
  wire [1-1:0] M_c14_out;
  reg [1-1:0] M_c14_in;
  button_conditioner_2 c14 (
    .clk(clk),
    .in(M_c14_in),
    .out(M_c14_out)
  );
  wire [1-1:0] M_e14_out;
  reg [1-1:0] M_e14_in;
  edge_detector_3 e14 (
    .clk(clk),
    .in(M_e14_in),
    .out(M_e14_out)
  );
  wire [1-1:0] M_c15_out;
  reg [1-1:0] M_c15_in;
  button_conditioner_2 c15 (
    .clk(clk),
    .in(M_c15_in),
    .out(M_c15_out)
  );
  wire [1-1:0] M_e15_out;
  reg [1-1:0] M_e15_in;
  edge_detector_3 e15 (
    .clk(clk),
    .in(M_e15_in),
    .out(M_e15_out)
  );
  wire [1-1:0] M_c16_out;
  reg [1-1:0] M_c16_in;
  button_conditioner_2 c16 (
    .clk(clk),
    .in(M_c16_in),
    .out(M_c16_out)
  );
  wire [1-1:0] M_e16_out;
  reg [1-1:0] M_e16_in;
  edge_detector_3 e16 (
    .clk(clk),
    .in(M_e16_in),
    .out(M_e16_out)
  );
  wire [1-1:0] M_c17_out;
  reg [1-1:0] M_c17_in;
  button_conditioner_2 c17 (
    .clk(clk),
    .in(M_c17_in),
    .out(M_c17_out)
  );
  wire [1-1:0] M_e17_out;
  reg [1-1:0] M_e17_in;
  edge_detector_3 e17 (
    .clk(clk),
    .in(M_e17_in),
    .out(M_e17_out)
  );
  wire [1-1:0] M_c18_out;
  reg [1-1:0] M_c18_in;
  button_conditioner_2 c18 (
    .clk(clk),
    .in(M_c18_in),
    .out(M_c18_out)
  );
  wire [1-1:0] M_e18_out;
  reg [1-1:0] M_e18_in;
  edge_detector_3 e18 (
    .clk(clk),
    .in(M_e18_in),
    .out(M_e18_out)
  );
  wire [1-1:0] M_c19_out;
  reg [1-1:0] M_c19_in;
  button_conditioner_2 c19 (
    .clk(clk),
    .in(M_c19_in),
    .out(M_c19_out)
  );
  wire [1-1:0] M_e19_out;
  reg [1-1:0] M_e19_in;
  edge_detector_3 e19 (
    .clk(clk),
    .in(M_e19_in),
    .out(M_e19_out)
  );
  wire [1-1:0] M_c20_out;
  reg [1-1:0] M_c20_in;
  button_conditioner_2 c20 (
    .clk(clk),
    .in(M_c20_in),
    .out(M_c20_out)
  );
  wire [1-1:0] M_e20_out;
  reg [1-1:0] M_e20_in;
  edge_detector_3 e20 (
    .clk(clk),
    .in(M_e20_in),
    .out(M_e20_out)
  );
  wire [1-1:0] M_c21_out;
  reg [1-1:0] M_c21_in;
  button_conditioner_2 c21 (
    .clk(clk),
    .in(M_c21_in),
    .out(M_c21_out)
  );
  wire [1-1:0] M_e21_out;
  reg [1-1:0] M_e21_in;
  edge_detector_3 e21 (
    .clk(clk),
    .in(M_e21_in),
    .out(M_e21_out)
  );
  wire [1-1:0] M_c22_out;
  reg [1-1:0] M_c22_in;
  button_conditioner_2 c22 (
    .clk(clk),
    .in(M_c22_in),
    .out(M_c22_out)
  );
  wire [1-1:0] M_e22_out;
  reg [1-1:0] M_e22_in;
  edge_detector_3 e22 (
    .clk(clk),
    .in(M_e22_in),
    .out(M_e22_out)
  );
  wire [1-1:0] M_c23_out;
  reg [1-1:0] M_c23_in;
  button_conditioner_2 c23 (
    .clk(clk),
    .in(M_c23_in),
    .out(M_c23_out)
  );
  wire [1-1:0] M_e23_out;
  reg [1-1:0] M_e23_in;
  edge_detector_3 e23 (
    .clk(clk),
    .in(M_e23_in),
    .out(M_e23_out)
  );
  wire [1-1:0] M_c24_out;
  reg [1-1:0] M_c24_in;
  button_conditioner_2 c24 (
    .clk(clk),
    .in(M_c24_in),
    .out(M_c24_out)
  );
  wire [1-1:0] M_e24_out;
  reg [1-1:0] M_e24_in;
  edge_detector_3 e24 (
    .clk(clk),
    .in(M_e24_in),
    .out(M_e24_out)
  );
  reg [24:0] M_grid_d, M_grid_q = 1'h0;
  reg [24:0] M_defaultGrid_d, M_defaultGrid_q = 1'h0;
  reg [24:0] M_currentGrid_d, M_currentGrid_q = 1'h0;
  reg [24:0] M_gridMask_d, M_gridMask_q = 1'h0;
  reg [4:0] M_start_d, M_start_q = 1'h0;
  reg [15:0] M_turn_d, M_turn_q = 1'h0;
  reg [1:0] M_zeroLight_d, M_zeroLight_q = 1'h0;
  reg [1:0] M_oneLight_d, M_oneLight_q = 1'h0;
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [1-1:0] M_alu_z;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_aa;
  reg [16-1:0] M_alu_bb;
  alu_52 alu (
    .clk(clk),
    .rst(rst),
    .alufn(M_alu_alufn),
    .aa(M_alu_aa),
    .bb(M_alu_bb),
    .out(M_alu_out),
    .v(M_alu_v),
    .n(M_alu_n),
    .z(M_alu_z)
  );
  wire [25-1:0] M_makeMask_mask;
  reg [25-1:0] M_makeMask_pushed;
  makeMask_53 makeMask (
    .clk(clk),
    .rst(rst),
    .pushed(M_makeMask_pushed),
    .mask(M_makeMask_mask)
  );
  wire [2-1:0] M_cross_winner;
  reg [25-1:0] M_cross_grid;
  cross_wincon_54 cross (
    .clk(clk),
    .rst(rst),
    .grid(M_cross_grid),
    .winner(M_cross_winner)
  );
  wire [2-1:0] M_square_winner;
  reg [25-1:0] M_square_grid;
  square_wincon_55 square (
    .clk(clk),
    .rst(rst),
    .grid(M_square_grid),
    .winner(M_square_winner)
  );
  wire [6-1:0] M_mostTiles_moreTiles;
  reg [25-1:0] M_mostTiles_grid;
  mostTiles_56 mostTiles (
    .clk(clk),
    .rst(rst),
    .grid(M_mostTiles_grid),
    .moreTiles(M_mostTiles_moreTiles)
  );
  wire [3-1:0] M_ledrow0_pixel;
  wire [1-1:0] M_ledrow0_led;
  reg [5-1:0] M_ledrow0_ledinput;
  reg [1-1:0] M_ledrow0_update;
  ledchange_57 ledrow0 (
    .clk(clk),
    .rst(rst),
    .ledinput(M_ledrow0_ledinput),
    .update(M_ledrow0_update),
    .pixel(M_ledrow0_pixel),
    .led(M_ledrow0_led)
  );
  wire [3-1:0] M_ledrow1_pixel;
  wire [1-1:0] M_ledrow1_led;
  reg [5-1:0] M_ledrow1_ledinput;
  reg [1-1:0] M_ledrow1_update;
  ledchange_57 ledrow1 (
    .clk(clk),
    .rst(rst),
    .ledinput(M_ledrow1_ledinput),
    .update(M_ledrow1_update),
    .pixel(M_ledrow1_pixel),
    .led(M_ledrow1_led)
  );
  wire [3-1:0] M_ledrow2_pixel;
  wire [1-1:0] M_ledrow2_led;
  reg [5-1:0] M_ledrow2_ledinput;
  reg [1-1:0] M_ledrow2_update;
  ledchange_57 ledrow2 (
    .clk(clk),
    .rst(rst),
    .ledinput(M_ledrow2_ledinput),
    .update(M_ledrow2_update),
    .pixel(M_ledrow2_pixel),
    .led(M_ledrow2_led)
  );
  wire [3-1:0] M_ledrow3_pixel;
  wire [1-1:0] M_ledrow3_led;
  reg [5-1:0] M_ledrow3_ledinput;
  reg [1-1:0] M_ledrow3_update;
  ledchange_57 ledrow3 (
    .clk(clk),
    .rst(rst),
    .ledinput(M_ledrow3_ledinput),
    .update(M_ledrow3_update),
    .pixel(M_ledrow3_pixel),
    .led(M_ledrow3_led)
  );
  wire [3-1:0] M_ledrow4_pixel;
  wire [1-1:0] M_ledrow4_led;
  reg [5-1:0] M_ledrow4_ledinput;
  reg [1-1:0] M_ledrow4_update;
  ledchange_57 ledrow4 (
    .clk(clk),
    .rst(rst),
    .ledinput(M_ledrow4_ledinput),
    .update(M_ledrow4_update),
    .pixel(M_ledrow4_pixel),
    .led(M_ledrow4_led)
  );
  wire [3-1:0] M_ledred_pixel;
  wire [1-1:0] M_ledred_led;
  reg [5-1:0] M_ledred_ledinput;
  reg [1-1:0] M_ledred_update;
  ledchange_57 ledred (
    .clk(clk),
    .rst(rst),
    .ledinput(M_ledred_ledinput),
    .update(M_ledred_update),
    .pixel(M_ledred_pixel),
    .led(M_ledred_led)
  );
  wire [3-1:0] M_ledgreen_pixel;
  wire [1-1:0] M_ledgreen_led;
  reg [5-1:0] M_ledgreen_ledinput;
  reg [1-1:0] M_ledgreen_update;
  ledchange_57 ledgreen (
    .clk(clk),
    .rst(rst),
    .ledinput(M_ledgreen_ledinput),
    .update(M_ledgreen_update),
    .pixel(M_ledgreen_pixel),
    .led(M_ledgreen_led)
  );
  wire [3-1:0] M_ledblack_pixel;
  wire [1-1:0] M_ledblack_led;
  reg [5-1:0] M_ledblack_ledinput;
  reg [1-1:0] M_ledblack_update;
  ledblack_64 ledblack (
    .clk(clk),
    .rst(rst),
    .ledinput(M_ledblack_ledinput),
    .update(M_ledblack_update),
    .pixel(M_ledblack_pixel),
    .led(M_ledblack_led)
  );
  localparam WAIT_CROSS_state = 3'd0;
  localparam WON_CROSS_state = 3'd1;
  localparam WAIT_SQ_state = 3'd2;
  localparam WON_SQ_state = 3'd3;
  localparam RESET_CROSS_state = 3'd4;
  localparam RESET_SQ_state = 3'd5;
  
  reg [2:0] M_state_d, M_state_q = WAIT_CROSS_state;
  
  reg [24:0] pushed;
  
  always @* begin
    M_state_d = M_state_q;
    M_turn_d = M_turn_q;
    M_start_d = M_start_q;
    M_defaultGrid_d = M_defaultGrid_q;
    M_grid_d = M_grid_q;
    M_zeroLight_d = M_zeroLight_q;
    M_gridMask_d = M_gridMask_q;
    M_currentGrid_d = M_currentGrid_q;
    M_oneLight_d = M_oneLight_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_ledrow0_update = 1'h1;
    M_ledrow1_update = 1'h1;
    M_ledrow2_update = 1'h1;
    M_ledrow3_update = 1'h1;
    M_ledrow4_update = 1'h1;
    M_ledred_update = 1'h1;
    M_ledgreen_update = 1'h1;
    M_ledblack_update = 1'h1;
    M_c0_in = btn0;
    M_e0_in = M_c0_out;
    M_c1_in = btn1;
    M_e1_in = M_c1_out;
    M_c2_in = btn2;
    M_e2_in = M_c2_out;
    M_c3_in = btn3;
    M_e3_in = M_c3_out;
    M_c4_in = btn4;
    M_e4_in = M_c4_out;
    M_c5_in = btn5;
    M_e5_in = M_c5_out;
    M_c6_in = btn6;
    M_e6_in = M_c6_out;
    M_c7_in = btn7;
    M_e7_in = M_c7_out;
    M_c8_in = btn8;
    M_e8_in = M_c8_out;
    M_c9_in = btn9;
    M_e9_in = M_c9_out;
    M_c10_in = btn10;
    M_e10_in = M_c10_out;
    M_c11_in = btn11;
    M_e11_in = M_c11_out;
    M_c12_in = btn12;
    M_e12_in = M_c12_out;
    M_c13_in = btn13;
    M_e13_in = M_c13_out;
    M_c14_in = btn14;
    M_e14_in = M_c14_out;
    M_c15_in = btn15;
    M_e15_in = M_c15_out;
    M_c16_in = btn16;
    M_e16_in = M_c16_out;
    M_c17_in = btn17;
    M_e17_in = M_c17_out;
    M_c18_in = btn18;
    M_e18_in = M_c18_out;
    M_c19_in = btn19;
    M_e19_in = M_c19_out;
    M_c20_in = btn20;
    M_e20_in = M_c20_out;
    M_c21_in = btn21;
    M_e21_in = M_c21_out;
    M_c22_in = btn22;
    M_e22_in = M_c22_out;
    M_c23_in = btn23;
    M_e23_in = M_c23_out;
    M_c24_in = btn24;
    M_e24_in = M_c24_out;
    pushed = 25'h0000000;
    if (M_e0_out) begin
      pushed[0+0-:1] = 1'h1;
    end else begin
      if (M_e1_out) begin
        pushed[1+0-:1] = 1'h1;
      end else begin
        if (M_e2_out) begin
          pushed[2+0-:1] = 1'h1;
        end else begin
          if (M_e3_out) begin
            pushed[3+0-:1] = 1'h1;
          end else begin
            if (M_e4_out) begin
              pushed[4+0-:1] = 1'h1;
            end else begin
              if (M_e5_out) begin
                pushed[5+0-:1] = 1'h1;
              end else begin
                if (M_e6_out) begin
                  pushed[6+0-:1] = 1'h1;
                end else begin
                  if (M_e7_out) begin
                    pushed[7+0-:1] = 1'h1;
                  end else begin
                    if (M_e8_out) begin
                      pushed[8+0-:1] = 1'h1;
                    end else begin
                      if (M_e9_out) begin
                        pushed[9+0-:1] = 1'h1;
                      end else begin
                        if (M_e10_out) begin
                          pushed[10+0-:1] = 1'h1;
                        end else begin
                          if (M_e11_out) begin
                            pushed[11+0-:1] = 1'h1;
                          end else begin
                            if (M_e12_out) begin
                              pushed[12+0-:1] = 1'h1;
                            end else begin
                              if (M_e13_out) begin
                                pushed[13+0-:1] = 1'h1;
                              end else begin
                                if (M_e14_out) begin
                                  pushed[14+0-:1] = 1'h1;
                                end else begin
                                  if (M_e15_out) begin
                                    pushed[15+0-:1] = 1'h1;
                                  end else begin
                                    if (M_e16_out) begin
                                      pushed[16+0-:1] = 1'h1;
                                    end else begin
                                      if (M_e17_out) begin
                                        pushed[17+0-:1] = 1'h1;
                                      end else begin
                                        if (M_e18_out) begin
                                          pushed[18+0-:1] = 1'h1;
                                        end else begin
                                          if (M_e19_out) begin
                                            pushed[19+0-:1] = 1'h1;
                                          end else begin
                                            if (M_e20_out) begin
                                              pushed[20+0-:1] = 1'h1;
                                            end else begin
                                              if (M_e21_out) begin
                                                pushed[21+0-:1] = 1'h1;
                                              end else begin
                                                if (M_e22_out) begin
                                                  pushed[22+0-:1] = 1'h1;
                                                end else begin
                                                  if (M_e23_out) begin
                                                    pushed[23+0-:1] = 1'h1;
                                                  end else begin
                                                    if (M_e24_out) begin
                                                      pushed[24+0-:1] = 1'h1;
                                                    end
                                                  end
                                                end
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    M_defaultGrid_d = 25'h1555555;
    M_alu_aa = 1'h0;
    M_alu_bb = 1'h0;
    M_alu_alufn = 1'h0;
    M_gridMask_d = 1'h0;
    M_makeMask_pushed = pushed;
    M_cross_grid = M_grid_q;
    M_square_grid = M_grid_q;
    M_mostTiles_grid = M_grid_q;
    
    case (M_state_q)
      WAIT_CROSS_state: begin
        if (M_cross_winner > 1'h0 | (M_turn_q[4+0-:1] > 1'h0 & M_turn_q[1+0-:1] > 1'h0)) begin
          M_state_d = WON_CROSS_state;
        end
        M_alu_aa = M_turn_q;
        M_alu_bb = 16'h0001;
        M_alu_alufn = 6'h00;
        if (M_turn_q[0+0-:1] > 1'h0) begin
          M_zeroLight_d = 2'h3;
          M_oneLight_d = 2'h1;
          led[6+1-:2] = M_zeroLight_q;
          led[4+1-:2] = M_oneLight_q;
        end else begin
          M_zeroLight_d = 2'h0;
          M_oneLight_d = 2'h3;
          led[6+1-:2] = M_zeroLight_q;
          led[4+1-:2] = M_oneLight_q;
        end
        if (pushed > 1'h0) begin
          M_turn_d = M_alu_out;
          led[0+2-:3] = M_turn_q;
          M_start_d = 1'h1;
          M_gridMask_d = M_makeMask_mask;
        end
      end
      WON_CROSS_state: begin
        M_alu_aa = 6'h00;
        M_alu_bb = M_cross_winner[1+0-:1];
        M_alu_alufn = 6'h35;
        if (M_cross_winner > 1'h0) begin
          M_zeroLight_d = M_alu_out;
          M_oneLight_d = M_alu_out;
          led[6+1-:2] = M_zeroLight_q;
          led[4+1-:2] = M_oneLight_q;
          if (pushed[12+0-:1] > 1'h0) begin
            M_state_d = RESET_CROSS_state;
          end else begin
            if (pushed[0+0-:1] > 1'h0) begin
              M_state_d = RESET_SQ_state;
            end
          end
        end else begin
          if (M_turn_q[4+0-:1] > 1'h0 & M_turn_q[1+0-:1] > 1'h0) begin
            M_zeroLight_d = M_mostTiles_moreTiles[0+0-:1];
            M_oneLight_d = M_mostTiles_moreTiles[0+0-:1];
            led[6+1-:2] = M_zeroLight_q;
            led[4+1-:2] = M_oneLight_q;
            if (pushed[12+0-:1] > 1'h0) begin
              M_state_d = RESET_CROSS_state;
            end else begin
              if (pushed[0+0-:1] > 1'h0) begin
                M_state_d = RESET_SQ_state;
              end
            end
          end else begin
            if (M_turn_q[0+0-:1] > 1'h0) begin
              M_zeroLight_d = 2'h3;
              M_oneLight_d = 2'h1;
              led[6+1-:2] = M_zeroLight_q;
              led[4+1-:2] = M_oneLight_q;
            end else begin
              M_zeroLight_d = 2'h0;
              M_oneLight_d = 2'h3;
              led[6+1-:2] = M_zeroLight_q;
              led[4+1-:2] = M_oneLight_q;
            end
            M_state_d = WAIT_CROSS_state;
          end
        end
      end
      WAIT_SQ_state: begin
        if (M_square_winner > 1'h0 | (M_turn_q[4+0-:1] > 1'h0 & M_turn_q[1+0-:1] > 1'h0)) begin
          M_state_d = WON_SQ_state;
        end
        M_alu_aa = M_turn_q;
        M_alu_bb = 16'h0001;
        M_alu_alufn = 6'h00;
        if (M_turn_q[0+0-:1] > 1'h0) begin
          M_zeroLight_d = 2'h3;
          M_oneLight_d = 2'h1;
          led[6+1-:2] = M_zeroLight_q;
          led[4+1-:2] = M_oneLight_q;
        end else begin
          M_zeroLight_d = 2'h0;
          M_oneLight_d = 2'h3;
          led[6+1-:2] = M_zeroLight_q;
          led[4+1-:2] = M_oneLight_q;
        end
        if (pushed > 1'h0) begin
          M_turn_d = M_alu_out;
          led[0+2-:3] = M_turn_q;
          M_start_d = 1'h1;
          M_gridMask_d = M_makeMask_mask;
        end
      end
      WON_SQ_state: begin
        M_alu_aa = 6'h01;
        M_alu_bb = M_square_winner[1+0-:1];
        M_alu_alufn = 6'h37;
        if (M_square_winner > 1'h0) begin
          M_zeroLight_d = M_alu_out;
          M_oneLight_d = M_alu_out;
          led[6+1-:2] = M_zeroLight_q;
          led[4+1-:2] = M_oneLight_q;
          if (pushed[12+0-:1] > 1'h0) begin
            M_state_d = RESET_CROSS_state;
          end
          if (pushed[0+0-:1] > 1'h0) begin
            M_state_d = RESET_SQ_state;
          end
        end else begin
          if (M_turn_q[4+0-:1] > 1'h0 & M_turn_q[1+0-:1] > 1'h0) begin
            M_zeroLight_d = M_mostTiles_moreTiles[0+0-:1];
            M_oneLight_d = M_mostTiles_moreTiles[0+0-:1];
            led[6+1-:2] = M_zeroLight_q;
            led[4+1-:2] = M_oneLight_q;
            if (pushed[12+0-:1] > 1'h0) begin
              M_state_d = RESET_CROSS_state;
            end
            if (pushed[0+0-:1] > 1'h0) begin
              M_state_d = RESET_SQ_state;
            end
          end else begin
            if (M_turn_q[0+0-:1] > 1'h0) begin
              M_zeroLight_d = 2'h3;
              M_oneLight_d = 2'h1;
              led[6+1-:2] = M_zeroLight_q;
              led[4+1-:2] = M_oneLight_q;
            end else begin
              M_zeroLight_d = 2'h0;
              M_oneLight_d = 2'h3;
              led[6+1-:2] = M_zeroLight_q;
              led[4+1-:2] = M_oneLight_q;
            end
            M_state_d = WAIT_SQ_state;
          end
        end
      end
      RESET_CROSS_state: begin
        if (pushed[12+0-:1] > 1'h0) begin
          M_start_d = 1'h0;
          M_turn_d = 1'h0;
          M_state_d = WAIT_CROSS_state;
        end
      end
      RESET_SQ_state: begin
        if (pushed[0+0-:1] > 1'h0) begin
          M_start_d = 1'h0;
          M_turn_d = 1'h0;
          M_state_d = WAIT_SQ_state;
        end
      end
    endcase
    M_currentGrid_d = M_gridMask_q ^ M_currentGrid_q;
    if (M_start_q != 1'h1) begin
      M_currentGrid_d = M_defaultGrid_q;
      led[1+0-:1] = M_currentGrid_q[0+0-:1];
    end
    M_grid_d = M_currentGrid_q;
    M_ledrow0_ledinput = M_grid_q[0+4-:5];
    M_ledrow1_ledinput = M_grid_q[5+4-:5];
    M_ledrow2_ledinput = M_grid_q[10+4-:5];
    M_ledrow3_ledinput = M_grid_q[15+4-:5];
    M_ledrow4_ledinput = M_grid_q[20+4-:5];
    row0 = M_ledrow0_led;
    row1 = M_ledrow1_led;
    row2 = M_ledrow2_led;
    row3 = M_ledrow3_led;
    row4 = M_ledrow4_led;
    led[6+1-:2] = M_zeroLight_q;
    led[4+1-:2] = M_oneLight_q;
    M_ledgreen_ledinput = 5'h00;
    M_ledred_ledinput = 5'h1f;
    M_ledblack_ledinput = 5'h00;
    if (M_oneLight_q == 2'h3 && M_zeroLight_q == 2'h0) begin
      redPlayer = M_ledblack_led;
      greenPlayer = M_ledgreen_led;
    end else begin
      if (M_oneLight_q == 2'h1 && M_zeroLight_q == 2'h3) begin
        redPlayer = M_ledred_led;
        greenPlayer = M_ledblack_led;
      end else begin
        if (M_zeroLight_q == 2'h0) begin
          redPlayer = M_ledgreen_led;
          greenPlayer = M_ledgreen_led;
        end else begin
          redPlayer = M_ledred_led;
          greenPlayer = M_ledred_led;
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_grid_q <= 1'h0;
      M_defaultGrid_q <= 1'h0;
      M_currentGrid_q <= 1'h0;
      M_gridMask_q <= 1'h0;
      M_start_q <= 1'h0;
      M_turn_q <= 1'h0;
      M_zeroLight_q <= 1'h0;
      M_oneLight_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_grid_q <= M_grid_d;
      M_defaultGrid_q <= M_defaultGrid_d;
      M_currentGrid_q <= M_currentGrid_d;
      M_gridMask_q <= M_gridMask_d;
      M_start_q <= M_start_d;
      M_turn_q <= M_turn_d;
      M_zeroLight_q <= M_zeroLight_d;
      M_oneLight_q <= M_oneLight_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
