module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    
    // all 25 buttons
    input btn0,
    input btn1,
    input btn2,
    input btn3,
    input btn4,
    input btn5,
    input btn6,
    input btn7,
    input btn8,
    input btn9,
    input btn10,
    input btn11,
    input btn12,
    input btn13,
    input btn14,
    input btn15,
    input btn16,
    input btn17,
    input btn18,
    input btn19,
    input btn20,
    input btn21,
    input btn22,
    input btn23,
    input btn24,
    
    // grid per row
    output row0,
    output row1,
    output row2,
    output row3,
    output row4,
    
    output redPlayer,
    output greenPlayer   
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    // for button debounce
    reset_conditioner reset_cond;
    button_conditioner c0;
    edge_detector e0(#RISE(1), #FALL(0));
    button_conditioner c1;
    edge_detector e1(#RISE(1), #FALL(0));
    button_conditioner c2;
    edge_detector e2(#RISE(1), #FALL(0));
    button_conditioner c3;
    edge_detector e3(#RISE(1), #FALL(0));
    button_conditioner c4;
    edge_detector e4(#RISE(1), #FALL(0));
    button_conditioner c5;
    edge_detector e5(#RISE(1), #FALL(0));
    button_conditioner c6;
    edge_detector e6(#RISE(1), #FALL(0));
    button_conditioner c7;
    edge_detector e7(#RISE(1), #FALL(0));
    button_conditioner c8;
    edge_detector e8(#RISE(1), #FALL(0));
    button_conditioner c9;
    edge_detector e9(#RISE(1), #FALL(0));
    button_conditioner c10;
    edge_detector e10(#RISE(1), #FALL(0));
    button_conditioner c11;
    edge_detector e11(#RISE(1), #FALL(0));
    button_conditioner c12;
    edge_detector e12(#RISE(1), #FALL(0));
    button_conditioner c13;
    edge_detector e13(#RISE(1), #FALL(0));
    button_conditioner c14;
    edge_detector e14(#RISE(1), #FALL(0));
    button_conditioner c15;
    edge_detector e15(#RISE(1), #FALL(0));
    button_conditioner c16;
    edge_detector e16(#RISE(1), #FALL(0));
    button_conditioner c17;
    edge_detector e17(#RISE(1), #FALL(0));
    button_conditioner c18;
    edge_detector e18(#RISE(1), #FALL(0));
    button_conditioner c19;
    edge_detector e19(#RISE(1), #FALL(0));
    button_conditioner c20;
    edge_detector e20(#RISE(1), #FALL(0));
    button_conditioner c21;
    edge_detector e21(#RISE(1), #FALL(0));
    button_conditioner c22;
    edge_detector e22(#RISE(1), #FALL(0));
    button_conditioner c23;
    edge_detector e23(#RISE(1), #FALL(0));
    button_conditioner c24;
    edge_detector e24(#RISE(1), #FALL(0));
    
    .rst(rst) {
      
      dff grid[25];
      dff defaultGrid[25];
      dff currentGrid[25];
      dff gridMask[25];
      dff start[5];
      
      dff turn[16];
      dff zeroLight[2];
      dff oneLight[2];
         
      alu alu;
      makeMask makeMask;
      cross_wincon cross;
      square_wincon square;
      mostTiles mostTiles;
      
      ledchange ledrow0;
      ledchange ledrow1;
      ledchange ledrow2;
      ledchange ledrow3;
      ledchange ledrow4;
      
      // different colours for each user's led
      ledchange ledred;
      ledchange ledgreen;
      ledblack ledblack;
      
      fsm state = {WAIT_CROSS,WON_CROSS,WAIT_SQ,WON_SQ,RESET_CROSS,RESET_SQ};
    }
    
  }
  
  sig pushed[25];
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    led = 8h00;
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    ledrow0.update=1;
    ledrow1.update=1;
    ledrow2.update=1;
    ledrow3.update=1;
    ledrow4.update=1;
    
    ledred.update=1;
    ledgreen.update=1;
    ledblack.update=1; 
    
    // for debounce
    c0.in = btn0;
    e0.in = c0.out;
    c1.in = btn1;
    e1.in = c1.out;
    c2.in = btn2;
    e2.in = c2.out;
    c3.in = btn3;
    e3.in = c3.out;
    c4.in = btn4;
    e4.in = c4.out;
    c5.in = btn5;
    e5.in = c5.out;
    c6.in = btn6;
    e6.in = c6.out;
    c7.in = btn7;
    e7.in = c7.out;
    c8.in = btn8;
    e8.in = c8.out;
    c9.in = btn9;
    e9.in = c9.out;
    c10.in = btn10;
    e10.in = c10.out;
    c11.in = btn11;
    e11.in = c11.out;
    c12.in = btn12;
    e12.in = c12.out;
    c13.in = btn13;
    e13.in = c13.out;
    c14.in = btn14;
    e14.in = c14.out;
    c15.in = btn15;
    e15.in = c15.out;
    c16.in = btn16;
    e16.in = c16.out;
    c17.in = btn17;
    e17.in = c17.out;
    c18.in = btn18;
    e18.in = c18.out;
    c19.in = btn19;
    e19.in = c19.out;
    c20.in = btn20;
    e20.in = c20.out;
    c21.in = btn21;
    e21.in = c21.out;
    c22.in = btn22;
    e22.in = c22.out;
    c23.in = btn23;
    e23.in = c23.out;
    c24.in = btn24;
    e24.in = c24.out;

    pushed = 25b0;
    
    //check which button pressed
    if (e0.out){
      pushed[0] = 1;
    } else if (e1.out){
      pushed[1] = 1;
    } else if (e2.out){
      pushed[2]= 1;
    } else if (e3.out){
      pushed[3] = 1;
    } else if (e4.out){
      pushed[4] = 1;
    } else if (e5.out){
      pushed[5] = 1;
    } else if (e6.out){
      pushed[6]= 1;
    } else if (e7.out){
      pushed[7] = 1;
    } else if (e8.out){
      pushed[8] = 1;
    } else if (e9.out){
      pushed[9] = 1;
    } else if (e10.out){
      pushed[10] = 1;
    } else if (e11.out){
      pushed[11] = 1;
    } else if (e12.out){
      pushed[12]= 1;
    } else if (e13.out){
      pushed[13] = 1;
    } else if (e14.out){
      pushed[14] = 1;
    } else if (e15.out){
      pushed[15] = 1;
    } else if (e16.out){
      pushed[16]= 1;
    } else if (e17.out){
      pushed[17] = 1;
    } else if (e18.out){
      pushed[18] = 1;
    } else if (e19.out){
      pushed[19] = 1;
    } else if (e20.out){
      pushed[20] = 1;
    } else if (e21.out){
      pushed[21] = 1;
    } else if (e22.out){
      pushed[22]= 1;
    } else if (e23.out){
      pushed[23] = 1;
    } else if (e24.out){
      pushed[24] = 1;
    }

    defaultGrid.d = 25b1010101010101010101010101;  // checker board pattern
    
    alu.aa = 0;
    alu.bb = 0;
    alu.alufn = 0;

    gridMask.d = 0;
        
    makeMask.pushed = pushed;
    cross.grid = grid.q;
    square.grid = grid.q;
    mostTiles.grid = grid.q;
      
    case (state.q){
      state.WAIT_CROSS:  // wait for button press - cross game
        if (cross.winner > 0| (turn.q[4] >0 & turn.q[1] > 0)){ // if win_con achieved/ number of turns run out
          state.d = state.WON_CROSS;
        }
        alu.aa = turn.q;  // turn + 1
        alu.bb = 16b1;
        alu.alufn = 6b0;
        if (turn.q[0] > 0){
          zeroLight.d = 2b11;  // off
          oneLight.d = 2b1;    // red
          led[7:6] = zeroLight.q;
          led[5:4] = oneLight.q;
        } else {
          zeroLight.d = 2b0;  // green
          oneLight.d = 2b11;  // off
          led[7:6] = zeroLight.q;
          led[5:4] = oneLight.q;
        }
        if (pushed > 0){ 
          turn.d = alu.out;
          led[2:0]= turn.q;
          start.d = 1;  // indicate that game started
          gridMask.d = makeMask.mask;
        }
      state.WON_CROSS: // won cross game
        alu.aa =  6b0;
        alu.bb = cross.winner[1];
        alu.alufn= 6b110101;  // LT
        if (cross.winner > 0) {  // check if cross formed (>0)
          zeroLight.d = alu.out; // indicate green's light
          oneLight.d =alu.out;   // indicate red's light
          led[7:6] = zeroLight.q;
          led[5:4] = oneLight.q;
          if (pushed[12] > 0){   // if middle button pressed
            state.d = state.RESET_CROSS;
          } else if (pushed[0] > 0){
            state.d = state.RESET_SQ;
          }
        } else if (turn.q[4] >0 & turn.q[1] > 0) { // check if maxturns reached
          zeroLight.d = mostTiles.moreTiles[0];  // indicate green's light
          oneLight.d = mostTiles.moreTiles[0];  // indicate red's light
          led[7:6] = zeroLight.q;
          led[5:4] = oneLight.q;
          if (pushed[12] > 0){  // if middle button pressed
            state.d = state.RESET_CROSS;
          } else if (pushed[0] > 0){
            state.d = state.RESET_SQ;
          }
        } else {
          if (turn.q[0] > 0){
            zeroLight.d = 2b11;  // off
            oneLight.d = 2b1;    // red
            led[7:6] = zeroLight.q;
            led[5:4] = oneLight.q;
          } else {
            zeroLight.d = 2b0;  // green
            oneLight.d = 2b11;  // off
            led[7:6] = zeroLight.q;
            led[5:4] = oneLight.q;
          }
          state.d = state.WAIT_CROSS;
        }
      state.WAIT_SQ:  // wait for button press - square game
        if (square.winner > 0| (turn.q[4] >0 & turn.q[1] > 0)){ // if win_con achieved/ number of turns run out
          state.d = state.WON_SQ;
        }
        alu.aa = turn.q;  // turn + 1
        alu.bb = 16b1;
        alu.alufn = 6b0;
        if (turn.q[0] > 0){ // for alternating turns
          zeroLight.d = 2b11;  // off (green's light)
          oneLight.d = 2b1;    // red (red's light)
          led[7:6] = zeroLight.q;
          led[5:4] = oneLight.q;
        } else {
          zeroLight.d = 2b0;  // green (green's light)
          oneLight.d = 2b11;  // off (red's light)
          led[7:6] = zeroLight.q;
          led[5:4] = oneLight.q;
        }
        if (pushed > 0){ 
          turn.d = alu.out;
          led[2:0]= turn.q;
          start.d = 1;  // indicate that game started
          gridMask.d = makeMask.mask;
        }
      state.WON_SQ: // won cross game 
        alu.aa =  6b1;
        alu.bb = square.winner[1];
        alu.alufn= 6b110111;  // LE
        if (square.winner > 0) {  // check if cross formed (>0)
          zeroLight.d = alu.out; // indicate green's light
          oneLight.d =alu.out;   // indicate red's light
          led[7:6] = zeroLight.q;
          led[5:4] = oneLight.q;
          if (pushed[12] > 0){   // if middle button pressed
            state.d = state.RESET_CROSS;
          } 
          if (pushed[0] > 0){  // if corner button pressed
            state.d = state.RESET_SQ;
          }
        } else if (turn.q[4] >0 & turn.q[1] > 0) { // check if maxturns reached
          zeroLight.d = mostTiles.moreTiles[0];  // indicate green's light
          oneLight.d = mostTiles.moreTiles[0];  // indicate red's light
          led[7:6] = zeroLight.q;
          led[5:4] = oneLight.q;
          if (pushed[12] > 0){  // if middle button pressed
            state.d = state.RESET_CROSS;
          } 
          if (pushed[0] > 0){  // if corner button pressed
            state.d = state.RESET_SQ;
          }
        } else {
          if (turn.q[0] > 0){  // for alternating turns
            zeroLight.d = 2b11;  // off (green's light)
            oneLight.d = 2b1;    // red (red's light)
            led[7:6] = zeroLight.q;
            led[5:4] = oneLight.q;
          } else {
            zeroLight.d = 2b0;  // green (green's light)
            oneLight.d = 2b11;  // off (red's light)
            led[7:6] = zeroLight.q;
            led[5:4] = oneLight.q;
          }
          state.d = state.WAIT_SQ;
        }
      state.RESET_CROSS:
        if (pushed[12] > 0){  // middle button double pressed
          start.d = 0; // reset grid to default
          turn.d = 0;  // restart turns
          state.d = state.WAIT_CROSS;
        }
      state.RESET_SQ:
        if (pushed[0] > 0){  // corner button double pressed
          start.d = 0; // reset grid to default
          turn.d = 0;  // restart turns
          state.d = state.WAIT_SQ;
        }
    }
    
    // invert the grid based on button press  
    currentGrid.d = gridMask.q ^ currentGrid.q;
    
    // if reset, set the grid to the initial layout
    if (start.q != 1){
      currentGrid.d = defaultGrid.q;
      led[1] = currentGrid.q[0];
    }
    
    // update shown grid with the current grid
    grid.d = currentGrid.q;
    
    // binary input coverted for rgb led 
    ledrow0.ledinput = grid.q[4:0];
    ledrow1.ledinput = grid.q[9:5];
    ledrow2.ledinput = grid.q[14:10];
    ledrow3.ledinput = grid.q[19:15];
    ledrow4.ledinput = grid.q[24:20];
    
    row0 = ledrow0.led;
    row1 = ledrow1.led;
    row2 = ledrow2.led;
    row3 = ledrow3.led;
    row4 = ledrow4.led;
    
    led[7:6] = zeroLight.q;
    led[5:4] = oneLight.q;
    
    // output for the leds indicating whose turn it is / who won
    ledgreen.ledinput = 5b00000;
    ledred.ledinput = 5b11111;
    ledblack.ledinput = 5b00000;
    
    if (oneLight.q == 2b11 && zeroLight.q == 2b0){ // if green's turn
      redPlayer = ledblack.led;
      greenPlayer = ledgreen.led;
    } else if (oneLight.q == 2b1 && zeroLight.q == 2b11){ // if red's turn 
      redPlayer = ledred.led;
      greenPlayer = ledblack.led;
    } else if (zeroLight.q == 2b0){   // if green wins
      redPlayer = ledgreen.led;
      greenPlayer = ledgreen.led;
    } else {                         // if red wins
      redPlayer = ledred.led;
      greenPlayer = ledred.led;
    }
    
  }
}