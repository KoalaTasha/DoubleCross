global Inst {
  const LT    = 6b110101;
  const EQ    = 6b110011;
  const LE    = 6b110111;
  const ADD   = 6b0;
  const SUB   = 6b1;
  const SHL   = 6b100000;
  const SHR   = 6b100001;
  const SRA   = 6b100011; 
  const AND   = 6b011000;
  const OR    = 6b011110;
  const XOR   = 6b010110;
  const LDR   = 6b011010;
}
module alu (
    input clk,         // clock
    input rst,         // reset  
    input alufn[6],
    input aa[16],
    input bb[16],
    output out[16],
    output v,          // overflow
    output n,          // negative
    output z           // s = 0
    
  ) {
 
  .clk(clk), .rst(rst) {  
    dff reg[32][16]; // storage of values
  }
  

  always {

    v = 0;
    n = 0;
    z = 0;
    

    reg.d[d1] = aa;    // reg 1 takes in a
    reg.d[d2] = bb;    // reg 2 takes in b
    
    reg.d[d31] =1;
    case (alufn){
       
       Inst.LT:
         reg.d[d3] = reg.q[d1] < reg.q[d2];   // less-than comparison
       Inst.EQ:
         reg.d[d3] = reg.q[d1] == reg.q[d2];  // equals comparison
       Inst.LE:
         reg.d[d3] = reg.q[d1] < reg.q[d2] | reg.q[d1] == reg.q[d2];  // less-than equals comparison
       Inst.ADD:
         reg.d[d3] = reg.q[d1] + reg.q[d2];   // addition
       Inst.SUB:
         reg.d[d3] = reg.q[d1] - reg.q[d2];   // subtraction
       Inst.SHL:
         reg.d[d3] = reg.q[d1] << reg.q[d2];  // shift left 
       Inst.SHR:
         reg.d[d3] = reg.q[d1] >> reg.q[d2];  // shift right
       Inst.SRA:
         reg.d[d3] = $signed(reg.q[d1]) >>> reg.q[d2];  // shift right arimethic
       Inst.AND:
         reg.d[d3] = reg.q[d1] & reg.q[d2];   // bit-wise AND
       Inst.OR:
         reg.d[d3] = reg.q[d1] | reg.q[d2];   // bit-wise OR
       Inst.XOR:
         reg.d[d3] = reg.q[d1] ^ reg.q[d2];   // bit-wise XOR
       Inst.LDR:
         reg.d[d3] = reg.q[d1];

    }

    v = reg.q[d10];
    n = reg.q[d11];
    z = reg.q[d12];        
    out = reg.q[d3];
    
  }
}